{"version":3,"sources":["components/Animations/slide.module.css","components/Animations/alert.module.css","components/OutputSection/OutputSection.module.css","components/AddSection/AddSection.module.css","components/Notification/Notification.module.css","views/PhoneBookView/phoneBookView.module.css","redux/phoneBook/phoneBook-operations.js","redux/phoneBook/phoneBook-selectors.js","components/Notification/index.jsx","components/AddSection/index.jsx","components/Filter/index.jsx","components/OutputSection/index.jsx","views/PhoneBookView/PhoneBookView.js"],"names":["module","exports","dispatch","a","actions","fetchContactsRequest","api","fetchContacts","data","fetchContactsSuccess","fetchContactsError","message","name","number","contact","console","log","addContactRequest","addContact","addContactSuccess","addContactError","id","deleteContactRequest","deleteContact","deleteContactSuccess","deleteContactError","getAllContacts","state","contacts","items","getFilter","filter","getLoading","loading","getError","error","getFilteredContacts","createSelector","allContacts","toLowerCase","includes","Notification","this","props","authError","setTimeout","clearError","CSSTransition","in","timeout","classNames","notificationTransition","unmountOnExit","className","s","errorMassage","Component","connect","phoneBookSelectors","authSelectors","phoneBookActions","AddSection","errorMessage","handleInput","e","target","value","setState","handleSubmit","preventDefault","some","resetData","onAddContact","container","type","placeholder","onChange","addBtn","onClick","selectors","operations","onChangeFilter","event","changeFilter","currentTarget","style","ulSection","onDeleteContact","onUpdateContact","TransitionGroup","component","map","slideTransition","liItem","text","deleteBtn","phoneBookView","clearFilter","isLoading","appear","title","length","filterAnim","onExiting","anim","contactsWrapper","phoneBookOperations"],"mappings":"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","file":"static/js/phone-book.11d30ef2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1DVFS\",\"enterActive\":\"slide_enterActive__g2nU4\",\"exit\":\"slide_exit__IZyly\",\"exitActive\":\"slide_exitActive__3k2Ge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"alert_enter__2JXXh\",\"enterActive\":\"alert_enterActive__13XOb\",\"exit\":\"alert_exit__HiQqi\",\"exitActive\":\"alert_exitActive__1QkPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBtn\":\"OutputSection_deleteBtn__uo2fW\",\"ulSection\":\"OutputSection_ulSection__G6d8O\",\"liItem\":\"OutputSection_liItem__1bH6c\",\"text\":\"OutputSection_text__28TzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddSection_container__CzuAw\",\"addBtn\":\"AddSection_addBtn__2ki1s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMassage\":\"Notification_errorMassage__3cXhO\",\"enter\":\"Notification_enter__290Ay\",\"enterActive\":\"Notification_enterActive__zyVym\",\"exit\":\"Notification_exit__1u4yK\",\"exitActive\":\"Notification_exitActive__31NxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"phoneBookView_container__6HZHC\",\"contactsWrapper\":\"phoneBookView_contactsWrapper__3BAVK\",\"title\":\"phoneBookView_title__24H1J\",\"appear\":\"phoneBookView_appear__20rEF\",\"appearActive\":\"phoneBookView_appearActive__1PF14\"};","import actions from './phoneBook-actions';\r\nimport api from '../../api/phoneBook-api';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n  try {\r\n    const { data } = await api.fetchContacts();\r\n    dispatch(actions.fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n  console.log(contact);\r\n  dispatch(actions.addContactRequest());\r\n  try {\r\n    const { data } = await api.addContact(contact);\r\n    dispatch(actions.addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.addContactError(error.message));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  try {\r\n    await api.deleteContact(id);\r\n    dispatch(actions.deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(actions.deleteContactError(error.message));\r\n  }\r\n};\r\n\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getAllContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getError = state => state.contacts.error;\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\nexport default {\r\n  getLoading,\r\n  getAllContacts,\r\n  getFilter,\r\n  getError,\r\n  getFilteredContacts,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Notification.module.css';\r\nimport { connect } from 'react-redux';\r\nimport phoneBookSelectors from '../../redux/phoneBook/phoneBook-selectors';\r\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport notificationTransition from \"../Animations/alert.module.css\";\r\nimport React from \"react\";\r\n\r\nclass Notification extends Component {\r\n  static propTypes = {\r\n    message: PropTypes.string,\r\n    error: PropTypes.object,\r\n    clearError: PropTypes.func,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.error || this.props.authError) {\r\n      setTimeout(() => {\r\n        this.props.clearError();\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CSSTransition\r\n        in={!!this.props.message}\r\n        timeout={250}\r\n        classNames={notificationTransition}\r\n        unmountOnExit\r\n      >\r\n        <div className={s.errorMassage}>\r\n        {this.props.message}\r\n    </div>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  error: phoneBookSelectors.getError(state),\r\n  authError: authSelectors.getError(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  clearError: () => dispatch(phoneBookActions.clearError()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport s from './AddSection.module.css';\r\nimport notificationTransition from \"../Animations/alert.module.css\";\r\nimport Notification from \"../Notification\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/phoneBook/phoneBook-operations';\r\nimport selectors from '../../redux/phoneBook/phoneBook-selectors';\r\n\r\nclass AddSection extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      }),\r\n    ),\r\n    onAddContact: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    error: false,\r\n    errorMessage: null,\r\n  };\r\n\r\n\r\n  handleInput = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const contacts = this.props.contacts;\r\n\r\n    if(!name){\r\n      this.setState({\r\n        error: true,\r\n        errorMessage: 'Enter name please',\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({ error: false });\r\n      }, 3000);\r\n      return;\r\n    }\r\n\r\n    if(!number){\r\n      this.setState({\r\n        error: true,\r\n        errorMessage: 'Enter number please',\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({ error: false });\r\n      }, 3000);\r\n      return;\r\n    }\r\n\r\n    if (contacts.some(contact => contact.name === name)) {\r\n      this.setState({\r\n        error: true,\r\n        errorMessage: 'Contact already exists',\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({ error: false });\r\n      }, 3000);\r\n      this.resetData();\r\n      return;\r\n    }\r\n\r\n    this.props.onAddContact(name, number);\r\n    this.resetData();\r\n  };\r\n  resetData() {\r\n    this.setState({ name: '', number: '' });\r\n  }\r\n    render() {\r\n      const { name, number, errorMessage } = this.state;\r\n  \r\n      return (\r\n        <div className={s.container}>\r\n          <Notification message={errorMessage} />\r\n            <p>Name</p>\r\n            <input type=\"text\" placeholder=\"Enter contact name\" name=\"name\"\r\n              value={name} onChange={this.handleInput}/>\r\n            <p>Number</p>\r\n            <input type=\"text\" placeholder=\"Enter phone number\" name=\"number\"\r\n              value={number} onChange={this.handleInput}/>\r\n            <button className={s.addBtn} onClick={this.handleSubmit}>Add contact</button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  const mapStateToProps = state => ({\r\n    contacts: selectors.getAllContacts(state),\r\n  });\r\n  \r\n  const mapDispatchToProps = dispatch => ({\r\n    onAddContact: (name, number) =>\r\n      dispatch(operations.addContact(name, number)),\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AddSection);","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\r\nimport phoneBookSelectors from '../../redux/phoneBook/phoneBook-selectors';\r\nimport style from \"../OutputSection/OutputSection.module.css\";\r\n\r\nfunction Filter({ value, onChangeFilter }) {\r\n  return (\r\n    <div className={style.ulSection}>\r\n            <p>Find contacts by name</p>\r\n            <input type=\"text\" placeholder=\"Enter contact name\" name=\"filter\"\r\n            value={value} onChange={onChangeFilter}/>\r\n</div>\r\n  );\r\n}\r\nconst mapStateToProps = state => ({\r\n  value: phoneBookSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeFilter: event =>\r\n    dispatch(phoneBookActions.changeFilter(event.currentTarget.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChangeFilter: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import PropTypes from \"prop-types\";\r\nimport style from \"./OutputSection.module.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport slideTransition from \"../Animations/slide.module.css\";\r\nimport operations from '../../redux/phoneBook/phoneBook-operations';\r\nimport selectors from '../../redux/phoneBook/phoneBook-selectors';\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction OutputSection({ contacts, onDeleteContact, onUpdateContact }) {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={style.ulSection}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <CSSTransition\r\n            key={id}\r\n            timeout={250}\r\n            classNames={slideTransition}\r\n            // unmountOnExit\r\n          >\r\n            <li className={style.liItem} key={id}>\r\n              <p className={style.text}>{name} : {number}</p>\r\n              <button\r\n                className={style.deleteBtn}\r\n                onClick={() => {\r\n                  onDeleteContact(id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          </CSSTransition>\r\n        );\r\n      })}\r\n    </TransitionGroup>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: selectors.getFilteredContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nOutputSection.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputSection);","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport phoneBookOperations from '../../redux/phoneBook/phoneBook-operations';\r\nimport phoneBookSelectors from '../../redux/phoneBook/phoneBook-selectors';\r\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\r\nimport AddSection from '../../components/AddSection';\r\nimport Filter from '../../components/Filter';\r\nimport OutputSection from '../../components/OutputSection';\r\nimport Notification from '../../components/Notification';\r\nimport MyLoader from '../../components/Loader';\r\nimport PropTypes from 'prop-types';\r\nimport s from './phoneBookView.module.css';\r\nimport anim from '../../components/Animations/slide.module.css';\r\nimport filterAnim from '../../components/Animations/slide.module.css';\r\n\r\nclass phoneBookView extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.object),\r\n    fetchContacts: PropTypes.func,\r\n    isLoading: PropTypes.bool,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contacts, error, clearFilter, isLoading } = this.props;\r\n\r\n    return (\r\n      <div className={s.container}>\r\n        {error && <Notification message={error.message} />}\r\n\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames={s}\r\n          unmountOnExit\r\n        >\r\n          {<h1 className={s.title}>Phonebook</h1>}\r\n        </CSSTransition>\r\n\r\n        <AddSection />\r\n\r\n        <CSSTransition\r\n          in={contacts.length > 1}\r\n          classNames={filterAnim}\r\n          timeout={250}\r\n          unmountOnExit\r\n          onExiting={() => clearFilter()}\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n\r\n        <CSSTransition\r\n          in={contacts.length > 0}\r\n          appear={true}\r\n          timeout={250}\r\n          classNames={anim}\r\n          unmountOnExit\r\n        >\r\n          <div className={s.contactsWrapper}>\r\n            <h2 className={s.title}>Contacts</h2>\r\n            {isLoading && <MyLoader />}\r\n            <OutputSection />\r\n          </div>\r\n        </CSSTransition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  contacts: phoneBookSelectors.getAllContacts(state),\r\n  isLoading: phoneBookSelectors.getLoading(state),\r\n  error: phoneBookSelectors.getError(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(phoneBookOperations.fetchContacts()),\r\n  clearFilter: () => dispatch(phoneBookActions.changeFilter('')),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(phoneBookView);\r\n"],"sourceRoot":""}